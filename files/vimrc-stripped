" Vimrc test blank
"
""" Initialization:
" We dont want to be capturing and then propagating Vim's state
" info.  Same for sessions and views

set viminfo=
set nocompatible
let mapleader = ","

set runtimepath=~/.vim,$VIMRUNTIME

runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()

""" Colors And Syntax: 
    let g:solarized_termcolors=16
    colorscheme solarized
    set background=dark
    call togglebg#map("<F6>")
    syntax enable

    " To set the actual background:
    " highligh Normal guibg=#cceeff

    " Show syntax highlighting groups for word under cursor
    nmap <C-S-P> :call <SID>SynStack()<CR>
    function! <SID>SynStack()
        if !exists("*synstack")
            return
        endif
        echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
    endfunc

""" Terminal and Mouse
    set mouse=a

""" Folding:
" Setup space for the fold indicators
    set foldcolumn=5

    " Quick 'n' Easy fold toggling (Simple, then Recursive):
    nnoremap <Space> za
    nnoremap <S-Space> zA

""" Line Numbers:
    set numberwidth=5
    set nu
    set ruler
    " Rotate Line Number Styles (well, just toggle for now)
    nmap <leader>n  :set nu!<CR>

""" Movements:
    map <C-h> <C-w>h
    map <C-j> <C-w>j
    map <C-k> <C-w>k
    map <C-l> <C-w>l


" Text Editing {{{1
" Defaults, changed by filetype and/or modelines
    set tabstop=4
    set softtabstop=2
    set shiftwidth=2
    set expandtab

    set textwidth=78
    set backspace=indent,eol,start
    set formatoptions=croql

" White Space: {{{2
  " Visibility {{{3
    " Character representations for invisibles (i.e., white space)
    set listchars=tab:▸\ ,eol:¬

    " Colors (NonText is eol, SpecialKey is tab)
    highlight NonText       guifg=#0000a4 guibg=NONE
    highlight SpecialKey    guifg=#4a4a59 guibg=NONE

    " Toggle Invisibles
    nmap <leader>l  :set list!<CR>





""" Utility Functions And Commands:

:nnoremap <leader>m :silent !open -a Marked.app '%:p'<cr>


" visual shifting (builtin-repeat)
  vnoremap < <gv
  vnoremap > >gv

"""" TabMessage
" From http://vim.wikia.com/wiki/Capture_ex_command_output
  function! TabMessage(cmd)
    redir => message
  "  redir @Z
    silent execute a:cmd
    redir END
  "  tabnew
    silent put=message
  "  set nomodified
  endfunction
  command! -nargs=1 -complete=command TabMessage call TabMessage(<q-args>)

""" DiffOrig Command:
" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
  if !exists(":DiffOrig")
    command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
            \ | wincmd p | diffthis
  endif


if filereadable('~/.vim/vimrc.local')
  source ~/.vim/vimrc.local
endif



" vim:fdm=expr:fdl=0
" vim:fde=getline(v\:lnum)=~'^""'?'>'.(matchend(getline(v\:lnum),'""*')-2)\:'='
